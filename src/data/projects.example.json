{
    "projects": [
        {
            "title": "Jumpstart ~ Static",
            "deck": "My Yeoman generator for kicking off Assemble based, static sites fast.",
            "actions": [
                {
                    "key": "Code",
                    "value": "https://github.com/max-barry/generator-jumpstart-static"
                },
                {
                    "key": "npm",
                    "value": "https://www.npmjs.com/package/generator-jumpstart-static"
                }
            ],
            "info": [
                {
                    "key": "We're talking",
                    "style": true,
                    "values": [
                        "Site builds",
                        "Yeoman",
                        "Grunt"
                    ]
                },
                {
                    "key": "Made in",
                    "values": [
                        "mid 2014"
                    ]
                },
                {
                    "key": "It uses",
                    "values": [
                        "Yeoman",
                        "npm",
                        "Grunt.js"
                    ]
                }
            ],
            "body": "Platforms, tools, and foundational pieces of work, are high cost investments that provide unsatisfying delayed gratification and burden one with maintainence. I can't escape this reality, but boy is it vindicating when you can cut corners and maximise efficiency because of historical effort you've put in.\n\nJumpstart Static is the first in a series of foundational works. A Yeoman generator that has made projects a cinch to begin. You start with an empty directory, and end with a fully functioning static site build framework, with the gritty bits are taken care of: SCSS compilation; Grunt tasks for development and performance; a templating engine (Assemble) as a robust backbone for rapid static sites.\n\n##Straight to Work\nA series of prompts on initialisation lets one refine the experience, including the declaration of frontend packages required (admittedly, this available options are influenced by what I like to use). The generator is designed to deliver a 'Straight to work' experience, no matter the permutations. The first line of code you write should be the first of your project; interesting stuff, not nefarious configuration or a banal doctype declaration.\n\n##Assemble\nJumpstart static was born of a Grunt Init template I had for launching Assemble projects. My first exposure to Assemble came from following the really smart work the folks at Webhook are doing. I've come to terms with the idea that Django is probably overkill for most of what I'm trying to do on the web. Prototypes, corporate sites, nameplates, and alike don't need (or warrent) the brain investment and headaches of all the weight that comes with a Django installation. But there are parts of Django I really like, I cried! The Jinja templates are delightful, but with a little nouse a similar setup can be gerrymandered with Assemble and the Swig engine. All that thinking landed me where I am today: why the effort when business logic-less static sites will do for most? I wonder sometimes if - given the team behind the Webhook project's history with Django - they didn't come to something of a similar conclusion. \nI've made dalliances with a smarter dumb site model whereby dynamic content can be built from a JSON source. Assemble is great if you have a bunch of pages that stand alone from one another, but less competent at dynamic content. For example, a list of news articles and then a slug page for each news article. My working solutions to this problem have so far involved duplicatimg a source template X number of times for each (in this example) news article, and then having Assemble compile those pseudo pages. It works, but it just doesn't feel like the right answer. A lot of huffing and puffing that leaves platforms like Express.js or Django my go to for mid-sized projects with dynamic pages (e.g. blogs or news magazines).",
            "listerimg": "http://i.giphy.com/k0CJuMw9h7m3S.gif",
            "slug": "jumpstart-static",
            "categories": [
                "yeoman",
                "site-builds",
                "grunt"
            ]
        },
        {
            "title": "mxbry.com",
            "deck": "This website you're reading right now! An exercise in little animations, and super lean web builds.",
            "actions": [
                {
                    "key": "Code",
                    "value": ""
                }
            ],
            "info": [
                {
                    "key": "We're talking",
                    "style": true,
                    "values": [
                        "Site builds",
                        "CSS3",
                        "UX",
                        "Design",
                        "Performance"
                    ]
                },
                {
                    "key": "Made in",
                    "values": [
                        "late 2014"
                    ]
                },
                {
                    "key": "It uses",
                    "values": [
                        "Express.js",
                        {
                            "value": "Marked",
                            "url": "https://www.npmjs.com/package/marked"
                        },
                        {
                            "value": "Swig",
                            "url": "http://paularmstrong.github.io/swig/"
                        },
                        "Bourbon",
                        {
                            "value": "doT.js",
                            "url": "http://olado.github.io/doT/index.html"
                        },
                        "Lo-Dash",
                        "jQuery",
                        {
                            "value": "Moment.js",
                            "url": "http://momentjs.com/"
                        }
                    ]
                }
            ],
            "body": "I wanted a portfolio that from UX through design and dev was simple and a directed experience. Each page had a clear motive, and focused on the content or primary actions it contained. An Express.js backend serves three routes; the [index](/), [project list](/work/), and project slug pages like this one. [Bourbon SCSS](http://bourbon.io/), viewport units, and a dollop of flexbox, do most of the visual heavy lifting. A full Grunt workflow and continuous performance testing underpins the development process. Digital Ocean provide the hosting, with Nginx and [PM2](https://github.com/Unitech/pm2) the primary server side packages. Task tracking and bug reporting was done using [Podio](https://podio.com). ## Think, Sketch, Build, Repeat Design, UX, and dev are part of the same process for me. They're distinct disciplines, but non-reusable content poured into a single area is wasted energy. I try and start on paper where I can, with a variant on [Todd Warfel's 6-8-5 technique](http://www.quora.com/Why-does-Adaptive-Path-say-that-sketching-a-design-should-take-5-minutes-and-6-iterations/answer/Todd-Zaki-Warfel); 8 rounds of 40 seconds to sketch a user experience/design for the <blank> (fill the blank with words like \"homepage\", \"grid view\", \"slug page\", etc.). For this project I became acutely focused on the portfolio list view. Lists of items are a real struggle for me. They're all so generic. I knew the information that mattered for this page, fortunately; the project's title, one or more relevant links for that item, and a way to filter items by their discipline (i.e. one should be able to quickly discern Django builds from a Yeoman generator). I tried desperately to escape the vertical list. Original sketches included a spider-like approach; a center anchor surrounded by projects, and instead of scrolling down the user would scroll out to reveal more projects. This is an ambitious interface to onboard the user with. I shelved that idea, but it intrigues me... watch this space. ### Creating a Narrative with Animation Animation is a tremendously powerful tool when writing the narrative of the page. I love UX (and by extension design) that delivers a user from one action to the next; the invisible hand guiding the user through the experience, unfolding a story along the way. Lots of little examples exist across the site: the full-page takeover menu grows from the button where the user instigates it; on the homepage the articles are loaded on to the page before finally the filter controls animate on, making the last moving component the first element I want you to engage with. I really love creating that story on a page, and I try and add it to as many of my projects as I can. ## Performance I weigh site performance against two metrics: [Google's Page Insights](https://developers.google.com/speed/pagespeed/insights/?url=http%3A%2F%2Fmxbry.com%2F&tab=desktop) and my self-set performance budget. The latter is an idea introduced to me by Smashing Magazine's fantastic [deep dive on web performance](http://www.smashingmagazine.com/2014/09/08/improving-smashing-magazine-performance-case-study/) in the modern web. The premise being that a page should visually render within an acceptable time, we have the tools to measure this (at least the people at [Web Page Test](https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index) do), and so with smart maths we can create an index against which we measure our site. 1000 is the slightly arbitrary figure Smashing Magazine chose for their target index, and so I followed suit for my performance budget. I should mention that Web Page Test do provide some context for that 1000 number; it puts your site in the 90th percentile for performance across the web. Testing the site against it's performance budget is baked in to the build workflow using a nifty Grunt task ([grunt-perfbudget](https://github.com/tkadlec/grunt-perfbudget)) and Web Page Test's cloud emulation API. At the moment all key pages on this site pass. Google's Page Insights is a really descriptive and helpful tool for grinding out a \"perfect\" performing site. On their 0 - 100 scale this site currently sits in the mid-90s. The homepage is dinged for little-too-lazy content loading. I fetch content from various external sources (GitHub's API, Twitter's pseudo frontend api, and more) and then animate it on to the page, but Google isn't a fan of ~40% of the page's visible matter being loaded after the fact. Such is life. <!-- For more information on how this level of performance was reached, find my deep dive on Medium --> ## Stuff I Don't Like I don't like... - How much I prevaricated putting it all together. ... and I really hate... - The mobile and tablet views of the portfolio list page. A rework is imminent. ... and I'm going to... - Go into much more detail about what packages I'm using, why and how. - Provide a neat \"next step\" once the user reaches the end of a specific project's slug page. At the moment the experience reaches a dead end. - Design a TL;DR excerpt because of how wordy I tend to get on these project slug pages. - Create a more unique way to present the project list page.",
            "listerimg": "",
            "slug": "mxbry",
            "categories": [
                "css3",
                "site-builds",
                "design",
                "ux",
                "performance"
            ]
        },
        {
            "title": "Deploy",
            "deck": "A Yeoman generator for a variety of configuration files involved in Django deployments; including uWSGI, NGINX, & Supervisor.",
            "actions": [
                {
                    "key": "Code",
                    "value": "https://github.com/max-barry/generator-deploy"
                },
                {
                    "key": "npm",
                    "value": "https://www.npmjs.com/package/generator-deploy"
                }
            ],
            "info": [
                {
                    "key": "We're talking",
                    "style": true,
                    "values": [
                        "Django",
                        "DevOps",
                        "Yeoman"
                    ]
                },
                {
                    "key": "Made in",
                    "values": [
                        "late 2014"
                    ]
                },
                {
                    "key": "It uses",
                    "values": [
                        {
                            "value": "Yeoman",
                            "url": "http://yeoman.io/"
                        },
                        "npm"
                    ]
                }
            ],
            "body": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum itaque fugit quod mollitia nisi nam quos rerum cum obcaecati placeat velit, hic ullam sunt dignissimos dolore pariatur inventore odio, culpa accusamus illum. Saepe repudiandae, sunt! Maxime enim eius, tempora totam accusamus voluptatem, quaerat magni fugit autem voluptate aperiam perferendis distinctio. Laboriosam iure sequi, dignissimos aliquam, asperiores sunt reprehenderit consequuntur eos deleniti ex ab consequatur itaque fugiat alias eum, nemo consectetur. Porro maxime, tenetur praesentium amet repellat, voluptatibus. Perspiciatis at nisi ducimus molestias ut dolorem, harum sint animi dicta excepturi incidunt a rerum aliquam repellendus quidem impedit deleniti iure illum quod aperiam repellat nobis est, vero assumenda tempora. Officia mollitia in recusandae libero dicta, dolorem, vitae tenetur hic accusamus eaque fuga illo fugiat accusantium vel inventore fugit similique magni ut quis placeat dolor ducimus quibusdam harum quas. Beatae id, culpa enim unde dolor molestiae architecto iusto eaque, esse non quaerat voluptatum magnam porro aperiam laboriosam consequatur ipsa doloribus, corporis rem, ducimus numquam! Incidunt esse voluptatibus odit libero consectetur temporibus ab ipsum beatae blanditiis qui perspiciatis tenetur eum excepturi sed molestias omnis autem similique, amet sint sapiente sunt. Labore eius officiis deserunt voluptatem, adipisci blanditiis ut sed sequi possimus impedit, doloremque. Natus.",
            "listerimg": "",
            "slug": "yeoman-deploy",
            "categories": [
                "django",
                "devops",
                "yeoman"
            ]
        },
        {
            "title": "Django Boilerplate",
            "deck": "Django Boilerplate developed in cooperation with colleagues at Havas Worldwide.",
            "body": "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Harum itaque fugit quod mollitia nisi nam quos rerum cum obcaecati placeat velit, hic ullam sunt dignissimos dolore pariatur inventore odio, culpa accusamus illum. Saepe repudiandae, sunt! Maxime enim eius, tempora totam accusamus voluptatem, quaerat magni fugit autem voluptate aperiam perferendis distinctio. Laboriosam iure sequi, dignissimos aliquam, asperiores sunt reprehenderit consequuntur eos deleniti ex ab consequatur itaque fugiat alias eum, nemo consectetur. Porro maxime, tenetur praesentium amet repellat, voluptatibus. Perspiciatis at nisi ducimus molestias ut dolorem, harum sint animi dicta excepturi incidunt a rerum aliquam repellendus quidem impedit deleniti iure illum quod aperiam repellat nobis est, vero assumenda tempora. Officia mollitia in recusandae libero dicta, dolorem, vitae tenetur hic accusamus eaque fuga illo fugiat accusantium vel inventore fugit similique magni ut quis placeat dolor ducimus quibusdam harum quas. Beatae id, culpa enim unde dolor molestiae architecto iusto eaque, esse non quaerat voluptatum magnam porro aperiam laboriosam consequatur ipsa doloribus, corporis rem, ducimus numquam! Incidunt esse voluptatibus odit libero consectetur temporibus ab ipsum beatae blanditiis qui perspiciatis tenetur eum excepturi sed molestias omnis autem similique, amet sint sapiente sunt. Labore eius officiis deserunt voluptatem, adipisci blanditiis ut sed sequi possimus impedit, doloremque. Natus.",
            "slug": "django-boilerplate",
            "categories": [
                "django"
            ]
        }
    ]
}